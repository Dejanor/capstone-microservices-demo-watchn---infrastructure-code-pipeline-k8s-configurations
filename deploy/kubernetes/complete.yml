apiVersion: v1
kind: Namespace
metadata:
  name: watchn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  labels:
    name: queue-master
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: queue-master
  template:
    metadata:
      labels:
        name: queue-master
    spec:
      containers:
      - name: queue-master
        image: weaveworksdemos/queue-master:0.3.1
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  labels:
    name: queue-master
  annotations:
    prometheus.io/path: /prometheus
  namespace: watchn
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: queue-master
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: rabbitmq
  template:
    metadata:
      labels:
        name: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.6.8
        ports:
        - containerPort: 5672
        securityContext:
          capabilities:
            drop:
            - all
            add:
            - CHOWN
            - SETGID
            - SETUID
            - DAC_OVERRIDE
          readOnlyRootFilesystem: true
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    name: rabbitmq
  namespace: watchn
spec:
  ports:
  - port: 5672
    targetPort: 5672
  selector:
    name: rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  labels:
    name: shipping
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: shipping
  template:
    metadata:
      labels:
        name: shipping
    spec:
      containers:
      - name: shipping
        image: weaveworksdemos/shipping:0.4.8
        env:
        - name: ZIPKIN
          value: zipkin.jaeger.svc.cluster.local
        - name: JAVA_OPTS
          value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC
            -Djava.security.egd=file:/dev/urandom
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - all
            add:
            - NET_BIND_SERVICE
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  labels:
    name: shipping
  namespace: watchn
spec:
  ports:
  - port: 8080
    targetPort: 80
  selector:
    name: shipping
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: front-end
  namespace: watchn
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
  labels:
    name: front-end
spec:
  rules:
  - http:
      paths:
      - path: /*
        backend:
          serviceName: front-end
          servicePort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  labels:
    name: carts-db
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts-db
  template:
    metadata:
      labels:
        name: carts-db
    spec:
      containers:
      - name: carts-db
        image: mongo
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop:
            - all
            add:
            - CHOWN
            - SETGID
            - SETUID
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  labels:
    name: carts-db
  namespace: watchn
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    name: carts-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  labels:
    name: carts
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: carts
  template:
    metadata:
      labels:
        name: carts
        fargate: "true"
    spec:
      containers:
      - name: carts
        image: niallthomson/shop-carts:1592591266
        ports:
        - containerPort: 8080
        env:
        - name: ZIPKIN
          value: zipkin.jaeger.svc.cluster.local
        - name: JAVA_OPTS
          value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC
            -Djava.security.egd=file:/dev/urandom
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  labels:
    name: carts
  namespace: watchn
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: carts
---
apiVersion: kbld.k14s.io/v1alpha1
kind: Sources
sources:
- image: watchn-catalog
  path: ../../src/catalog
---
apiVersion: kbld.k14s.io/v1alpha1
kind: ImageDestinations
destinations:
- image: watchn-catalog
  newImage: docker.io/niallthomson/shop-catalog
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue-db
  labels:
    name: catalogue-db
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue-db
  template:
    metadata:
      labels:
        name: catalogue-db
    spec:
      containers:
      - name: catalogue-db
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        - name: MYSQL_DATABASE
          value: watchndb
        - name: MYSQL_USER
          value: catalog_user
        - name: MYSQL_PASSWORD
          value: default_password
        ports:
        - name: mysql
          containerPort: 3306
---
apiVersion: v1
kind: Service
metadata:
  name: catalog-db
  labels:
    name: catalog-db
  namespace: watchn
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    name: catalogue-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  labels:
    name: catalogue
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: catalogue
  template:
    metadata:
      labels:
        name: catalogue
        fargate: "true"
    spec:
      containers:
      - name: catalogue
        image: niallthomson/shop-catalog:1593030117
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  labels:
    name: catalogue
  namespace: watchn
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: catalogue
---
apiVersion: kbld.k14s.io/v1alpha1
kind: Sources
sources:
- image: watchn-front-end
  path: ../../src/front-end
---
apiVersion: kbld.k14s.io/v1alpha1
kind: ImageDestinations
destinations:
- image: watchn-front-end
  newImage: docker.io/niallthomson/shop-front-end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: front-end
  template:
    metadata:
      labels:
        name: front-end
    spec:
      containers:
      - name: front-end
        image: watchn-front-end
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  labels:
    name: front-end
  namespace: watchn
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
  selector:
    name: front-end
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  labels:
    name: orders-db
  namespace: watchn
spec:
  selector:
    matchLabels:
      name: orders-db
  replicas: 1
  template:
    metadata:
      labels:
        name: orders-db
    spec:
      containers:
      - name: orders-db
        image: mongo
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop:
            - all
            add:
            - CHOWN
            - SETGID
            - SETUID
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  labels:
    name: orders-db
  namespace: watchn
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    name: orders-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    name: orders
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: orders
  template:
    metadata:
      labels:
        name: orders
    spec:
      containers:
      - name: orders
        image: niallthomson/shop-orders:1592591266
        env:
        - name: ZIPKIN
          value: zipkin.jaeger.svc.cluster.local
        - name: JAVA_OPTS
          value: -Xms64m -Xmx128m -XX:PermSize=32m -XX:MaxPermSize=64m -XX:+UseG1GC
            -Djava.security.egd=file:/dev/urandom
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    name: orders
  namespace: watchn
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: orders
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  labels:
    name: payment
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: payment
  template:
    metadata:
      labels:
        name: payment
    spec:
      containers:
      - name: payment
        image: niallthomson/shop-payment:1592591266
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels:
    name: payment
  namespace: watchn
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  labels:
    name: user-db
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user-db
  template:
    metadata:
      labels:
        name: user-db
    spec:
      containers:
      - name: user-db
        image: weaveworksdemos/user-db:0.4.0
        ports:
        - name: mongo
          containerPort: 27017
        securityContext:
          capabilities:
            drop:
            - all
            add:
            - CHOWN
            - SETGID
            - SETUID
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: tmp-volume
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  labels:
    name: user-db
  namespace: watchn
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    name: user-db
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  labels:
    name: user
  namespace: watchn
spec:
  replicas: 1
  selector:
    matchLabels:
      name: user
  template:
    metadata:
      labels:
        name: user
    spec:
      containers:
      - name: user
        image: niallthomson/shop-user:1592591266
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_HOST
          value: user-db:27017
        - name: USER_DATABASE
          value: mongodb
        - name: HATEAOS
          value: user
---
apiVersion: v1
kind: Service
metadata:
  name: user
  labels:
    name: user
  namespace: watchn
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: user
