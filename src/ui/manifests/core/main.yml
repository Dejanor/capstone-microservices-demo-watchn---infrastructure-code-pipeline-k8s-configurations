#@ load("@ytt:data", "data")

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  labels:
    name: ui
  namespace: #@ data.values.namespace
spec:
  minReadySeconds: 5
  revisionHistoryLimit: 5
  progressDeadlineSeconds: 180
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  #@ if/end not data.values.hpa.enabled:
  replicas: #@ data.values.ui.replicas
  selector:
    matchLabels:
      name: ui
  template:
    metadata:
      labels:
        name: ui
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - ui
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
      containers:
      - name: ui
        image: #@ data.values.ui.image.build.id
        ports:
          - name: http
            containerPort: 8080
        env:
          - name: JAVA_OPTS
            value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        envFrom:
        - configMapRef:
            name: #@ data.values.ui.configMap.name
        resources:
          requests:
            memory: #@ data.values.ui.resources.memory
          limits:
            memory: #@ data.values.ui.resources.memory
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 3
        securityContext:
          readOnlyRootFilesystem: #@ data.values.ui.securityContext.readOnlyRootFilesystem
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory

#@ if/end data.values.ui.configMap.create:
---
  apiVersion: v1
  kind: ConfigMap
  metadata:
    name: #@ data.values.ui.configMap.name
    namespace: #@ data.values.namespace
  data:
    ENDPOINTS_CATALOG: #@ data.values.ui.endpoints.catalog
    ENDPOINTS_CARTS: #@ data.values.ui.endpoints.carts
    ENDPOINTS_ORDERS: #@ data.values.ui.endpoints.orders

#@ if data.values.ui.service.create:
---
apiVersion: v1
kind: Service
metadata:
  name: #@ data.values.ui.service.name
  labels:
    name: #@ data.values.ui.service.name
  namespace: #@ data.values.namespace
spec:
  type: #@ data.values.ui.service.type
  ports:
  - port: 80
    targetPort: http
  selector:
    name: ui
#@ end