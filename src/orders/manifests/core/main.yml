#@ load("@ytt:data", "data")


apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  labels:
    name: orders
  namespace: #@ data.values.namespace
spec:
  minReadySeconds: 5
  revisionHistoryLimit: 5
  progressDeadlineSeconds: 180
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  replicas: #@ data.values.orders.replicas
  selector:
    matchLabels:
      name: orders
  template:
    metadata:
      labels:
        name: orders
        fargate: "true"
      #@ if data.values.metrics.prometheus.enabled:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8080'
        prometheus.io/path: '/actuator/prometheus'
      #@ end
    spec:
      containers:
      - name: orders
        image: #@ data.values.orders.image.build.id
        ports:
         - containerPort: 8080
        env:
          - name: JAVA_OPTS
            value: -Djava.security.egd=file:/dev/urandom
          - name: SERVER_TOMCAT_ACCESSLOG_ENABLED
            value: "true"
          - name: SPRING_PROFILES_ACTIVE
            value: mysql
        resources:
          requests:
            memory: "1024Mi"
          limits:
            memory: "1024Mi"
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 3
      volumes:
        - name: tmp-volume
          emptyDir:
            medium: Memory

#@ if data.values.services.enabled:
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  labels:
    name: orders
  namespace: #@ data.values.namespace
spec:
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    name: orders
#@ end